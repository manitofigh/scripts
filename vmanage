#!/bin/bash

#
# vmanage - VM CPU Management Script
#
# This script manages VM CPU configurations using virsh. It supports vCPU pinning and migration operations,
# providing both interactive and command-line modes with robust error handling and a user-friendly interface.
#
# Author: Mani Tofigh
#

# Color Codes
GREEN='\e[32m'
RED='\e[31m'
YELLOW='\e[33m'
BLUE='\e[34m'
NC='\e[0m' # No Color

# Function to print success messages
print_success() {
    echo -e "${GREEN}[+]${NC} $1"
}

# Function to print error messages
print_error() {
    echo -e "${RED}[-]${NC} $1"
}

# Function to print warning messages
print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Function to print question prompts
print_question() {
    echo -ne "${BLUE}[?]${NC} $1 "
}

# Check for sudo privileges
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root."
    exit 1
fi

# Check for required commands
for cmd in virsh lscpu getopt; do
    if ! command -v $cmd &>/dev/null; then
        print_error "Required command '$cmd' not found."
        exit 1
    fi
done

# Initialize variables
INTERACTIVE_MODE=0
DOMAIN=""
OPERATION=""
SOCKET=""
SAME_CORE=0
DISTRIBUTE=0
CORE1=""
CORE2=""
INTERVAL=""
VCPU_NUM=""
SHOW_HELP=0
BACKGROUND=""

# Function to display help
show_help() {
    echo "Usage: vmanage [options]"
    echo ""
    echo "Options:"
    echo "  -i, --interactive        Interactive mode"
    echo "  -d, --domain DOMAIN      VM domain name"
    echo "  -o, --operation OP       Operation type (vcpupin/migrate)"
    echo "  -s, --socket SOCKET      Socket number"
    echo "      --same-core          Use sibling threads"
    echo "      --distribute         Spread across sockets"
    echo "      --core1 CORE         Migration core 1"
    echo "      --core2 CORE         Migration core 2"
    echo "      --interval INTERVAL  Migration interval"
    echo "      --vcpu VCPU_NUM      vCPU number to migrate"
    echo "  -h, --help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  vmanage -i"
    echo "    # Runs the script in interactive mode."
    echo ""
    echo "  vmanage -d vm1 -o vcpupin -s 0"
    echo "    # Pins all vCPUs of 'vm1' to socket 0."
    echo ""
    echo "  vmanage -d vm1 -o migrate --vcpu 1 --core1 0 --core2 4 --interval 60"
    echo "    # Migrates vCPU 1 of 'vm1' between physical cores 0 and 4 every 60 seconds."
}

# Parse command-line arguments
TEMP=$(getopt -o id:o:s:h --long interactive,domain:,operation:,socket:,same-core,distribute,core1:,core2:,interval:,vcpu:,help -n 'vmanage' -- "$@")
if [ $? != 0 ]; then
    print_error "Error parsing options."
    exit 1
fi

eval set -- "$TEMP"

while true; do
    case "$1" in
    -i | --interactive)
        INTERACTIVE_MODE=1
        shift
        ;;
    -d | --domain)
        DOMAIN="$2"
        shift 2
        ;;
    -o | --operation)
        OPERATION="$2"
        shift 2
        ;;
    -s | --socket)
        SOCKET="$2"
        shift 2
        ;;
    --same-core)
        SAME_CORE=1
        shift
        ;;
    --distribute)
        DISTRIBUTE=1
        shift
        ;;
    --core1)
        CORE1="$2"
        shift 2
        ;;
    --core2)
        CORE2="$2"
        shift 2
        ;;
    --interval)
        INTERVAL="$2"
        shift 2
        ;;
    --vcpu)
        VCPU_NUM="$2"
        shift 2
        ;;
    -h | --help)
        SHOW_HELP=1
        shift
        ;;
    --)
        shift
        break
        ;;
    *)
        print_error "Invalid option: $1"
        exit 1
        ;;
    esac
done

if [ $SHOW_HELP -eq 1 ]; then
    show_help
    exit 0
fi

# Function to check if VM exists
check_vm_exists() {
    if ! virsh dominfo "$DOMAIN" &>/dev/null; then
        print_error "Domain '$DOMAIN' does not exist."
        exit 1
    fi
}

# Function to get CPU topology
get_cpu_topology() {
    SOCKETS=$(lscpu | awk '/Socket\(s\):/ {print $2}')
    CORES_PER_SOCKET=$(lscpu | awk '/Core\(s\) per socket:/ {print $4}')
    THREADS_PER_CORE=$(lscpu | awk '/Thread\(s\) per core:/ {print $4}')
    TOTAL_CORES=$(lscpu | awk '/^CPU\(s\):/ {print $2}')
}

# Interactive mode functions
interactive_mode() {
    print_question "Enter the domain name of the VM:"
    read DOMAIN
    check_vm_exists

    print_question "Select operation type:\n1) vcpupin\n2) migrate\nEnter choice [1-2]:"
    read op_choice

    if [ "$op_choice" == "1" ]; then
        OPERATION="vcpupin"
    elif [ "$op_choice" == "2" ]; then
        OPERATION="migrate"
    else
        print_error "Invalid choice."
        exit 1
    fi

    if [ "$OPERATION" == "vcpupin" ]; then
        vcpupin_interactive
    elif [ "$OPERATION" == "migrate" ]; then
        migrate_interactive
    fi
}

vcpupin_interactive() {
    get_cpu_topology
    print_question "Do you want to pin to the same socket? (y/N)"
    read SAME_SOCKET

    if [[ "$SAME_SOCKET" =~ ^[Yy]$ ]]; then
        print_question "Enter socket number (0 to $(($SOCKETS - 1))):"
        read SOCKET
    fi

    print_question "Do you want to use sibling threads (same core)? (y/N)"
    read SIBLING_THREADS

    if [[ "$SIBLING_THREADS" =~ ^[Yy]$ ]]; then
        SAME_CORE=1
    fi

    print_question "Do you want to distribute vCPUs across sockets? (y/N)"
    read DISTRIBUTE_CPUS

    if [[ "$DISTRIBUTE_CPUS" =~ ^[Yy]$ ]]; then
        DISTRIBUTE=1
    fi

    vcpupin_operation
}

migrate_interactive() {
    check_vm_exists
    get_cpu_topology

    VCPU_COUNT=$(virsh dominfo "$DOMAIN" | awk '/^CPU.s.:/ {print $2}')
    if [ -z "$VCPU_COUNT" ]; then
        print_error "Failed to get vCPU count for domain '$DOMAIN'."
        exit 1
    fi
    VCPU_MAX_INDEX=$(($VCPU_COUNT - 1))

    print_question "Enter the vCPU number to migrate (0 to $VCPU_MAX_INDEX):"
    read VCPU_NUM

    if [ -z "$VCPU_NUM" ] || [ "$VCPU_NUM" -lt 0 ] || [ "$VCPU_NUM" -gt "$VCPU_MAX_INDEX" ]; then
        print_error "Invalid vCPU number '$VCPU_NUM'."
        exit 1
    fi

    print_question "Enter the first physical core for migration (0 to $(($TOTAL_CORES - 1))):"
    read CORE1
    print_question "Enter the second physical core for migration (0 to $(($TOTAL_CORES - 1))):"
    read CORE2
    print_question "Enter the migration interval in seconds:"
    read INTERVAL
    print_question "Do you want to run the migration in background? (y/N)"
    read BACKGROUND

    migrate_operation
}

# vcpupin operation
vcpupin_operation() {
    check_vm_exists
    get_cpu_topology

    VCPU_COUNT=$(virsh dominfo "$DOMAIN" | awk '/^CPU.s.:/ {print $2}')
    if [ -z "$VCPU_COUNT" ]; then
        print_error "Failed to get vCPU count for domain '$DOMAIN'."
        exit 1
    fi

    print_success "vCPU count for domain '$DOMAIN': $VCPU_COUNT"

    declare -a CPU_MAP

    if [ "$SAME_CORE" -eq 1 ]; then
        CORE_INDEX=0
        for ((i = 0; i < VCPU_COUNT; i++)); do
            PHYSICAL_CPU=$((CORE_INDEX * THREADS_PER_CORE))
            CPU_MAP[$i]=$PHYSICAL_CPU
            ((CORE_INDEX++))
            if [ $CORE_INDEX -ge $CORES_PER_SOCKET ]; then
                CORE_INDEX=0
            fi
        done
    elif [ "$DISTRIBUTE" -eq 1 ]; then
        SOCKET_INDEX=0
        for ((i = 0; i < VCPU_COUNT; i++)); do
            PHYSICAL_CPU=$((SOCKET_INDEX * CORES_PER_SOCKET * THREADS_PER_CORE + i % (CORES_PER_SOCKET * THREADS_PER_CORE)))
            CPU_MAP[$i]=$PHYSICAL_CPU
            ((SOCKET_INDEX++))
            if [ $SOCKET_INDEX -ge $SOCKETS ]; then
                SOCKET_INDEX=0
            fi
        done
    elif [ -n "$SOCKET" ]; then
        if [ "$SOCKET" -ge "$SOCKETS" ] || [ "$SOCKET" -lt 0 ]; then
            print_error "Invalid socket number '$SOCKET'."
            exit 1
        fi
        for ((i = 0; i < VCPU_COUNT; i++)); do
            PHYSICAL_CPU=$((SOCKET * CORES_PER_SOCKET * THREADS_PER_CORE + i % (CORES_PER_SOCKET * THREADS_PER_CORE)))
            CPU_MAP[$i]=$PHYSICAL_CPU
        done
    else
        for ((i = 0; i < VCPU_COUNT; i++)); do
            CPU_MAP[$i]=$i
        done
    fi

    for ((i = 0; i < VCPU_COUNT; i++)); do
        virsh vcpupin "$DOMAIN" $i ${CPU_MAP[$i]} &>/dev/null
        if [ $? -eq 0 ]; then
            print_success "Pinned vCPU $i to physical CPU ${CPU_MAP[$i]}"
        else
            print_error "Failed to pin vCPU $i"
        fi
    done

    print_success "Equivalent command-line syntax:"
    CMD="vmanage -d $DOMAIN -o vcpupin"
    [ "$SAME_CORE" -eq 1 ] && CMD+=" --same-core"
    [ "$DISTRIBUTE" -eq 1 ] && CMD+=" --distribute"
    [ -n "$SOCKET" ] && CMD+=" -s $SOCKET"
    echo "$CMD"
}

# Migrate operation
migrate_operation() {
    check_vm_exists
    get_cpu_topology

    VCPU_COUNT=$(virsh dominfo "$DOMAIN" | awk '/^CPU.s.:/ {print $2}')
    if [ -z "$VCPU_NUM" ] || [ "$VCPU_NUM" -lt 0 ] || [ "$VCPU_NUM" -ge "$VCPU_COUNT" ]; then
        print_error "Invalid or unspecified vCPU number '$VCPU_NUM'."
        exit 1
    fi

    if [ -z "$CORE1" ] || [ -z "$CORE2" ] || [ -z "$INTERVAL" ]; then
        print_error "Core1, Core2, and Interval must be specified for migration."
        exit 1
    fi

    if [ "$CORE1" -ge "$TOTAL_CORES" ] || [ "$CORE1" -lt 0 ]; then
        print_error "Invalid core number '$CORE1'."
        exit 1
    fi

    if [ "$CORE2" -ge "$TOTAL_CORES" ] || [ "$CORE2" -lt 0 ]; then
        print_error "Invalid core number '$CORE2'."
        exit 1
    fi

    # Display equivalent command-line syntax
    CMD="vmanage -d $DOMAIN -o migrate --vcpu $VCPU_NUM --core1 $CORE1 --core2 $CORE2 --interval $INTERVAL"
    [ "$BACKGROUND" =~ ^[Yy]$ ] && CMD+=" &"
    print_success "Equivalent command-line syntax:"
    echo "$CMD"

    migrate_loop() {
        while true; do
            virsh vcpupin "$DOMAIN" --vcpu "$VCPU_NUM" --cpulist "$CORE1" &>/dev/null
            if [ $? -eq 0 ]; then
                print_success "Migrated vCPU $VCPU_NUM to core $CORE1"
            else
                print_error "Failed to migrate vCPU $VCPU_NUM to core $CORE1"
            fi
            sleep "$INTERVAL"
            virsh vcpupin "$DOMAIN" --vcpu "$VCPU_NUM" --cpulist "$CORE2" &>/dev/null
            if [ $? -eq 0 ]; then
                print_success "Migrated vCPU $VCPU_NUM to core $CORE2"
            else
                print_error "Failed to migrate vCPU $VCPU_NUM to core $CORE2"
            fi
            sleep "$INTERVAL"
        done
    }

    if [[ "$BACKGROUND" =~ ^[Yy]$ ]]; then
        nohup bash -c "$(declare -f migrate_loop); migrate_loop" &>/dev/null &
        print_success "Migration started in background."
    else
        migrate_loop
    fi
}

# Main logic
if [ "$INTERACTIVE_MODE" -eq 1 ]; then
    interactive_mode
else
    if [ -z "$DOMAIN" ] || [ -z "$OPERATION" ]; then
        print_error "Domain and operation must be specified."
        show_help
        exit 1
    fi

    if [ "$OPERATION" == "vcpupin" ]; then
        vcpupin_operation
    elif [ "$OPERATION" == "migrate" ]; then
        migrate_operation
    else
        print_error "Invalid operation '$OPERATION'."
        exit 1
    fi
fi

